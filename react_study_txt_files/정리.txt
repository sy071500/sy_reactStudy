DOM 다루기 / Element 생성하기 정리
- React / React-dom : element 생성 / appendChild

JSX와 Babel / JSX 다루기

Element 찍어내기
- Function : 재사용 가능한 Element

리액트 리랜더링 알아보기
- 바닐라 JS : 변경으로 인해 Element를 다시 그림
- 리액트의 비교 : Reconciliation
- Virtual DOM : 비교시 활용

컴포넌트 상태 다루기
- useState : 상태값을 관리해주는 훅

컴포넌트 사이드 이펙트 다루기
- useEffect : dependency array

커스텀 훅 만들기

hook flow 이해하기
- hook flow : hook들의 호출 타이밍
- update시 : useEffect clean up / useEffect

리액트 Element에 스타일 입히기
- className : 문자열
- style: 객체, 카멜케이스, className보다 먼저

Ref로 DOM 다루기
- React: useRef / ref

From 다루기
- onSubmit : event.preventDefault()
- event.target.elements : console.dir(element)
- validateion : onChange
- controlled : input의 value를 직접 관리

Error 다루기
- Error Boundary : Catch Error 해서 보여주기
- Fallback : Error가 났을 때 보여줄 컴포넌트

Key와 리렌더링 알아보기
- Key: Value를 특정하는 이름

Key와 리렌더링 알아보기2
- 재사용 : key를 제대로 줘야 재사용 가능
- 제대로 준다 : 중복없고, 바뀌지 않는

상태 끌어올리기
- 형제 컴포넌트의 상태 궁금 : 필요하면 부모로 lifting up
- Props drilling : 과도한 lifting은 drilling을 야기

데이터 Fetch 해보기
- Fetch api : 네트워크 통신 도구
- 상황별 핸들링 : 로딩 / 데이터 / 에러
=========================================================
* JSX
- JSX 없이 사용하는 React
-> React를 사용할 때 JSX는 필수가 아닙니다. 빌드 환경에서 컴파일 설정을 하고 싶지 않을 때 JSX 없이 React를 사용하는 것은 특히 편리합니다.
- JSX 소개
-> React에서는 본질적으로 렌더링 로직이 UI 로직(이벤트가 처리되는 방식, 시간에 따라 state가 변하는 방식, 화면에 표시하기 위해 데이터가 준비되는 방식 등)과 연결된다는 사실을 받아들입니다.
-> JSX는 HTML보다는 JavaScript에 가깝기 때문에, React DOM은 HTML 어트리뷰트 이름 대신 camelCase 프로퍼티 명명 규칙을 사용합니다.
- JSX : React.createElement 간편 표현식

* Props
- 컴포넌트에 전달되는 단일 객체
- 순수 함수처럼 동작 : Props 자체를 수정해서는 안됨
- 컴포넌트의 이름은 항상 대문자로 시작합니다.
- 컴포넌트 합성(여러 컴포넌트를 모아서)
-> 컴포넌트는 자신의 출력에 다른 컴포넌트를 참조할 수 있습니다.
-> rfc 명령어
import React from 'react'

export default function Composition() {
  return (
    <div>Composition</div>
  )
}
-> props는 읽기 전용입니다.
- 컴포넌트 추출(여러 곳에서 사용되거나 / 복잡한 경우)

* State
- rcc
- 컴포넌트의 상태 : 자신의 출력값을 변경
- Class component : State LifeCycle
- Functional component : 훅으로 관리
- 유의사항: 직접 수정x / 비동기적일 수 있음

* 컴포넌트 생명주기
- 마운트
아래 메서드들은 컴포넌트의 인스턴스가 생성되어 DOM 상에 삽입될 때에 순서대로 호출됩니다.
1. constructor()
2. render()
3. componentDidMount()
- 업데이트
props 또는 state가 변경되면 갱신이 발생합니다. 아래 메서드들은 컴포넌트가 다시 렌더링될 때 순서대로 호출됩니다.
1. render()
2. componentDidUpdate()
- 마운트 해제
아래 메서드는 컴포넌트가 DOM 상에서 제거될 때에 호출됩니다.
1. componentWillUnmount()
- constructor : state 초기화 및 메서드 바인딩
- componentDidMount : Dom 노드 초기화 및 데이터 Fetch
- componentWillUnmount : 타이머 제거 및 요청 취소 및 구독 해제
- Functional Component : hook으로 대부분 구현 가능

* 이벤트
- 합성 이벤트 : 인터페이스는 같지만 직접 대응되지 않음
- Bubble / Capture : Capture > target > Bubble
- return false : e.preventDefault() 해줘야함

* 조건부 렌더링
- if : if(condition){return A} else { return B}
- && : condition && A, falsy 주의
- 삼항연산자 : condition ? A : B
- 아예 안그리고 싶은 경우 : return null

* List
- map : 배열의 개별 요소를 순회
- default key : 안주면 react는 index를 쓴다(워닝은 남)
- 고유성 : 형제 사이에서만 고유하면 됨
- key props : key는 props로 넘어가지 않음

* Form
- Controlled Component : input의 value를 state로 관리
- 다중입력 : event.target.name
- UnControlled Component : form element 자체의 내부 상태 활용
- defaultValue, ref : 기본값 / value 확인

* Hooks
- Hooks 등장 : Class의 단점 보완 / 재사용성 강화
- Hook 사용 규칙 : 최상위 / 함수형 컴포넌트 / custom Hook
- Class의 state : 훅을 먼저 배웠기에 고민 할 필요 x
- useEffect : 데이터 fetch / 구독 / DOM 수정
- clean up : 구독과 구독해지를 한 공간에서
- dependency array : 필요한 변경시에만 effect 실행
- Custom Hook : 컴포넌트들에 반복되는 Hooks 묶기
- 다양한 Hooks : 필요한 타이밍에 참고해서 사용

* Composition
- Composition : 컴포넌트에 컴포넌트 담기
- 담는 방법 : Children / Custom
- typeof : type check
- 확장성 : 다양한 상황을 품을 수 있도록

* HOC(Higher Order Component)
- HOC : 함수를 받아서 함수를 리턴

* Memoization
- React.memo : HOC / Props 비교하여 메모
- Profiler : 리액트 성능 분석 도구
- callback : useCallback
- value : useMemo

* Context
- 컴포넌트 트리 제약 : Props drilling의 한계 해소
- 재사용성 : Context를 사용하면 재사용하기 어려움
- API : createContext / Provider / Consumer
- useContext : Consumer 대체

* Portal
- createPortal : 부모 컴포넌트 DOM 트리로부터 벗어나기
- 이벤트 : Portal에 있더라도 Event는 트리로 전파

* Render Props
- render props : 무엇을 렌더링할 지 알려주는 함수
- render일 필요 : 없음, children도 되고 뭐든 됨
- PureComponent : props, state 비교하여 성능 최적화

* PropTypes
- 개발 모드에서만 동작: 유효하지 않은 prop에 대한 경고
- custom : RegExp 등으로 사용자 정의 가능
- children 제한 : 원래 제약없던 갯수 제약 가능

* Reconciliation
- 루트부터 비교
- 트리를 파괴 : 부모가 바뀌었다면 트리를 버린다
- Keys : 자식 재귀 처리 시 효율성 확보
- Virtual DOM : 실제 DOM과 동기화 할 가상 표현
- 재조정 : 실제 DOM과 Virtual DOM의 동기화
- React Fiber : 스택 reconciler 대체한 재조정 엔진

* React Dev Tool
- 개발자 도구 확장 : React에서 확인하고 싶은 것들
- 성능 측정 : Profiler

* 라이브러리란?
- 라이브러리 : 공구 / 도구
- 라이브러리 도입 과정 : 필요 > 검색 > 사용법 파악 > 적용
- 사용법을 익히기 보다 : 찾고 / 적용하는 과정을 익히자

* Moment
- 타임존 : moment/timezone
- Format / 비교 : 원하는 스타일로 표기 가능
- 오래됨 : Mutable / Tree shaking  X

* Day.js
- 타임존 : plugin/timezone plugin/utc
- Format / 비교 : 원하는 스타일로 표기 가능
- 가벼움 : Tree shaking X

* date-fns
- 타임존 : date-fns-tz
- Format / 비교 : 원하는 스타일로 표기 가능
- 포괄적임  : Immutable / Tree shaking 까지
- 함수별 import : 가능 ex. addWeeks

* styled-components
- CSS in JS : CSS의 문제점을 해소
- 해결책 : 스타일을 style 태그로 분리
- 사용법(Template literals) : styled.{element}``
- styled.{element}`` : 상속
- & : 가상 엘리먼트 / 가상 선택자
- Global Style : 전역 스타일
- attrs : props addition
- keyframes / ThemeProvider : keyframes / ThemeProvider

* emotion
- react에 특화 : @emotion/react
- css props : jsx를 대체함
- styled components : styled-component + @
- composition : css 안에서 css 사용
- 기능 : Fallbacks, &, Global, keyframes
- styled-components : 서로 점점 유사해짐
- trend : emotion이 우세한 듯
- 사이즈 / 속도 : emotion이 우세한 듯

* sass
- 전처리기 : CSS의 확장
- Sass / Scss : 보다 CSS와 유사한 SCSS
- 사용 : variables / modules / mixin / extend
- syntax : 언어처럼 자체 syntax가 있음
- Interpolation : #{ } 값을 주입(마치 `${ }`)
- values / functions : 프로그래밍 언어스러움

* Onsen UI
- UI 라이브러리 : 스타일링 된 컴포넌트 제공
- 기본적인 기능 : 제공(ex. Action Sheet)
- JS / Vue / React / Angular : 모두 서포트
- 모바일 대응 : 안드로이드 / 아이폰 대응
- 다양한 컴포넌트 : 모바일 케이스 대응
- 아이콘 : Font Awesome / Ionicons
- 문서 최신화 : 잘 안되는 듯(React에 불친절)

* Ant Design
- React : React 베이스
- Day.js : Moment.js 제거 추천
- Design 철학 : 단순한 컴포넌트 제공 + @
- Typography : 다양한 사이즈의 Text
- Layout : 화면 구조를 간편하게 배치
- 다양한 Component : 복붙만으로 화면 구성 가능
- 문서를 읽는 방법 : 익히기 좋음

* React Semantic UI
- Semantic Web : 웹 접근성
- JQuery 기반 Semantic UI : 리액트용으로 제공
- Try It : 변경을 바로 확인 가능
- as props : Semantic 한 tag 사용 가능
- Comment / Feed : 다 만들어서 제공
- 다양한 컴포넌트 : 웹 서비스 구성에 필요한 거의 모든
- 여러 컴포넌트 조합 : visibility + progress

* React Bootstrap
- 반응형 웹 : xs / md /lg
- Sass : @inport 해서 쓸 수 있음
- 익숙한 UI : Bootstrap을 그대로 가져옴
- 컬러 시스템 : 통일성 있음
- Admin : Admin 페이지에서 자주 본 스타일
- Utilities : Transitions / Ratio

* Material UI
- Material Design : 구글이 선도한 디자인 시스템
- 다양한 서포트 : Example Project / Design Tools
- FAQ : 실무 과정에서 마주할 이슈들 정리
- Layout / Theme : 체계화 된 시스템
- API 구성 : Components / API / Demo
- makeStyles : 컴포넌트의 구조를 관장
- Virtual List : Virtual scroll
- Syste : 순수한 커스텀 컴포넌트 생성 가능

* Tailwind CSS
- 컴포넌트 : 자체를 제공하진 않음(유료)
- class : 스타일 요소를 모두 줌
- Tiny : 빌드할때는 사용하는 class만
- Intelli Sense  : VS code extension 제공
- Utility First : 클래스 이름 생성 X / CSS 추가 X
- 다크모드 : 대응 용이(media / class)
- Customize : configuration 차원에서
- 대부분의 css : 커버함 (but 예제는 아쉽…)

* React spring
- 좀 더 나은 애니메이션 : 물리엔진
- hooks : use{*}
- animated : Outside React

* Framer Motion
- Framer : Design + Frontend Tool
- Motion : Animation 기능이 들어간 Component
- Variants : Propagation / Orchestration
- Propagation / Orchestration : 편의 기능들 제공

* msw
- Mocking : 모의 데이터 활용
- Browser : Service worker 활용
- REST API / GraphQL : 모두 모킹이 가능
- mock : handler / brower 만 있어도 동작
- public : npx msw init <PUBLIC_PATH>
- 기타 커스텀 : query / patching / error

* Redux
- 전역 상태 관리 : vs 지역 상태 관리
- 단 방향 데이터(상태) 흐름  : Flux
- 구성 요소 : Store / Reducer / Action / Selector
- RTK : Redux 라이브러리들 조합
- 라이브러리들 : immer / saga / thunk / reselect
- Redux Dev Tools : Chrome extension
- Hooks : useSelector / useDispatch
- API 통신 : 비동기 작업(RTK-Query)
- Redux-Thunk : Action으로 API 요청/결과 Store에 반영

* Mobx
- Simple : No Boilerplate
- Action  :  Derivative를 바꾸는 유일한 수단
- Reactive Programming : Observable / Observer
- with React : re-render issue (small component)
- makeAutoObservable : makeObservable을 보다 쉽게
- actions : runInAction / flow
- Computed : getter pure
- reaction : side effect
- reactive : observable 인 것이 바뀔때